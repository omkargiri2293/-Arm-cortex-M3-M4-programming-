Discussion about T bit of the EPSR

-> various ARM processors support ARM-Thumb interworking, that means the ability to switch between ARM and Thumb state.

-> the processor must be in ARM state to execute instructions from ARM ISA
and the processor must be in Thumb state to execute instructions of Thumb ISA

-> If 'T' bit of EPSR is set(1), processor thinks that the next instruction which it is about to execute is from Thumb ISA.

-> If 'T' bit of EPSR is reset(0), processor thinks that the next instruction which it is about to execute is from ARM ISA.

-> The cortex Mx processor does not support the "ARM" state.
Hence, the value of 'T' bit must always be 1.
Failing to maintain this is illegal and this will result in the "usage fault" exception.

-> The LSB (bit 0) of the program counter(PC) is linked to this 'T' bit.
when you load a value or address in the PC the bit[0] of the value is loaded into the T-bit.

-> Hence any address you place in the PC must have its 0th bit as 1.
This is usually taken care by the compiler and programmers 
need not to worry most of the time.

-> This is why you see all vector addresses are incremented by 1 in the vector table.